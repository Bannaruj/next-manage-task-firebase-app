"use client";
import React from "react";
import Image from "next/image";
import planning from "@/assets/planning.png";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";

export default function EditTaskPage() {
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: rounter -> router
  const router = useRouter();
  // id ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å useParams ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ string[] (‡∏Å‡∏£‡∏ì‡∏µ dynamic route)
  const idParam = useParams().id;
  const taskId = Array.isArray(idParam) ? idParam[0] : idParam;

  const [title, setTitle] = useState<string>("");
  const [detail, setDetail] = useState<string>("");
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô Supabase: is_complete ‡∏´‡∏£‡∏∑‡∏≠ is_completed
  const [is_complete, setIsComplete] = useState<boolean>(false);
  const [image_file, setImageFile] = useState<File | null>(null);
  const [preview_file, setPreviewFile] = useState<string | null>(null);
  // State ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
  const [old_image_file, setOldImageFile] = useState<string | null>(null);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å supabase ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ï‡∏≤‡∏°id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏à‡∏≤‡∏Åurl
  useEffect(() => {
    async function fetchData() {}

    fetchData();
  }, [taskId]); // ‡πÉ‡∏ä‡πâ taskId ‡πÉ‡∏ô dependency array

  function handleSelectImagePreview(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0] || null;

    setImageFile(file);

    if (file) {
      setPreviewFile(URL.createObjectURL(file as Blob));
    }
  }

  async function handleUploadAndUpdate(e: React.FormEvent) {
    e.preventDefault();
  }

  return (
    <div className="flex flex-col w-3/4 mx-auto">
      <div className="flex items-center mt-20 flex-col">
        <Image src={planning} alt="Planning Icon" width={150} height={150} />
        <h1 className="text-2xl font-bold mt-10">Manage Task App</h1>
        <h1 className="text-2xl font-bold">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥</h1>
      </div>
      <div className="flex flex-col border border-gray-300 p-5 rounded-lg shadow-lg mt-5">
        <h1 className="text-center text-xl font-bold rounded-xl text-gray-700">
          üë®‚Äçüîß‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ (ID: {taskId})
        </h1>
      </div>
      <form onSubmit={handleUploadAndUpdate}>
        <div className="flex flex-col mt-5">
          <label className="text-lg font-bold text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</label>
          <input
            type="text"
            className="border border-gray-300 rounded-lg p-3 mt-1 focus:ring-blue-500 focus:border-blue-500"
            onChange={(e) => setTitle(e.target.value)}
            value={title}
            required
          />
        </div>

        <div className="flex flex-col mt-5">
          <label className="text-lg font-bold text-gray-700">
            ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
          </label>
          <textarea
            className="text-lg font-bold border border-gray-300 rounded-lg p-3 mt-1 focus:ring-blue-500 focus:border-blue-500"
            onChange={(e) => setDetail(e.target.value)}
            value={detail}
            rows={4}
          ></textarea>
        </div>

        <div className="flex flex-col mt-5">
          <label className="text-lg font-bold text-gray-700">
            ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          </label>
          <input
            id="fileinput"
            type="file"
            className="hidden"
            accept="image/*"
            onChange={handleSelectImagePreview}
          />
          <label
            htmlFor="fileinput"
            className="bg-blue-500 hover:bg-blue-600 rounded-lg p-3 text-white cursor-pointer w-40 text-center transition duration-200 shadow-md"
          >
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
          </label>

          {preview_file && (
            <div className="mt-3 p-3 border border-gray-200 rounded-lg max-w-max">
              <h3 className="text-sm font-semibold mb-2">
                ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô/‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà:
              </h3>
              <Image
                src={preview_file}
                alt="preview"
                width={150}
                height={150}
                className="rounded-lg object-cover"
                // ‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡πÉ‡∏ô Next/Image ‡πÄ‡∏°‡∏∑‡πà‡∏≠ URL ‡πÄ‡∏õ‡πá‡∏ô external
                loader={({ src }) => src}
                unoptimized={true}
              />
              {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤ */}
              {image_file && (
                <button
                  type="button"
                  onClick={() => {
                    setPreviewFile(null);
                    setImageFile(null);
                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏° (old_image_file) ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
                    setPreviewFile(old_image_file);
                  }}
                  className="text-red-500 hover:text-red-700 mt-2 text-sm"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
                </button>
              )}
            </div>
          )}
        </div>

        <div className="flex flex-col mt-5">
          <label htmlFor="status" className="text-lg font-bold text-gray-700">
            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô
          </label>
          <select
            id="status"
            className="border border-gray-300 rounded-lg p-3 mt-1 focus:ring-blue-500 focus:border-blue-500"
            value={is_complete ? "1" : "0"}
            onChange={(e) => setIsComplete(e.target.value === "1")}
          >
            <option value="0">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
            <option value="1">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
          </select>
        </div>
        <div className="flex flex-col mt-8">
          <button
            type="submit"
            className="bg-green-500 hover:bg-green-600 rounded-lg p-3 text-white font-bold transition duration-200 shadow-md"
          >
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô
          </button>
        </div>
      </form>

      <div className="flex justify-center mt-10 mb-20">
        <Link
          href="/alltask"
          className="text-blue-600 hover:text-blue-800 font-bold transition duration-200"
        >
          ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </Link>
      </div>
    </div>
  );
}
